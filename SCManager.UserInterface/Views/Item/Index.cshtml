@model SCManager.UserInterface.Models.ItemViewModel
@using SCManager.UserInterface.App_Start
@{
    ViewBag.Title = "Item";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
 @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/DataTables/css/datatable")
 @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/bootstrapdatepicker")
 @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/UserCSS/Item")
}

<div class="col-md-12">
    <div class="SCHeader col-md-6">
       Items

    </div>
    <div class="col-md-6">
        <div class="" id="btnPatchItemSettab" style="min-height:25px">

            @{
                var data = new { ActionType = "List" };
                @Html.Action("ChangeButtonStyle", "Item", data);
            }
        </div>
    </div>
</div>
<div id="exTab3" class="container SCtabContainer">
    <ul class="nav nav-pills">
        <li class="active" >
            <a id="ListTab" onclick="List()" href="#ItemList" data-toggle="tab"> <span class="fa fa-list">&nbsp;&nbsp;</span>Item List</a>
        </li>
        <li >
            <a id="AddTab" onclick="Add(1)" href="#ItemEntry" data-toggle="tab" style="width:170px"><span class="fa fa-file-o">&nbsp;&nbsp;</span>Item Entry</a>
        </li>

    </ul>
    <div class="tab-content clearfix">
        <div class="tab-pane fade in active" id="ItemList">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                <table id="tblItemList" class="table table-striped table-bordered table-hover" cellspacing="0">
                    <thead>
                        <tr class="text-center">
                            <th style="display:none;">ID</th>
                            <th>Item Code</th>
                            <th>Description</th>
                            <th>HSN No</th>
                            <th>Category</th>
                            <th style="display:none;" >Sub Category</th>
                            <th>Stock Qty </th>
                            <th>Def/Damg Qty</th>
                            <th style="display:none;">UOM</th>
                            <th>Reorder Qty</th>
                            <th >Product Commission (₹)</th>
                            <th>Base  Rate (₹)</th>
                            <th>CGST (%)</th>
                            <th>SGST (%)</th>
                            <th>Is Active</th>
                            <th >Remarks</th>                           
                            <th>...</th>

                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="tab-pane fade" id="ItemEntry">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                @using (Ajax.BeginForm("InsertUpdateItem", "Item", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "ItemSaveSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", id = "formIns_Up" }))
            {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">


                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="inputForm col-md-12">
                            &nbsp;
                        </div>
                        <div class="col-md-6">

                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.ItemCode, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.ItemCode, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                    @Html.ValidationMessageFor(model => model.ItemCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control ", @rows = "2" })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.HsnNo, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.HsnNo, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                    @Html.ValidationMessageFor(model => model.HsnNo, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>



                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.UOM, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                  @*  @Html.EditorFor(model => model.UOM, new { htmlAttributes = new { @class = "form-control" } })*@
                                    @Html.DropDownListFor(model => model.UOM, Model.UOMList, "-- Select UOM --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;" })
                                    @Html.ValidationMessageFor(model => model.UOM, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>
                      



                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.DropDownListFor(model => model.CategoryID, Model.CategoryList, "-- Select Category --", new { @class = "form-control BlockEnter", @onchange = "CategoryOnChange(this)", value = -1, style = "padding:4px 12px;" })

                                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>


                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.Subcategory, htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-5">
                                        <select class="form-control" id="Subcategory" style="padding:4px 12px;">
                                            <option value="-1">-- Select SubCategory --</option>
                                        </select>
                                        @*@Html.DropDownListFor(model => model.Subcategory,Model.SubCategoryList, "-- Select SubCategory --" , new { @class = "form-control",  value = -1 })
                @Html.ValidationMessageFor(model => model.Subcategory, "", new { @class = "text-danger" })*@
                                    </div>
                                    @*<div class="col-md-1 mandatory"></div>*@
                                </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.SCQty, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.SCQty, new { htmlAttributes = new { @class = "form-control BlockEnter", @readonly = "readonly", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.SalesReturnPendingQty, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.SalesReturnPendingQty, new { htmlAttributes = new { @class = "form-control BlockEnter", @readonly = "readonly", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.TechnicianQty, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.TechnicianQty, new { htmlAttributes = new { @class = "form-control BlockEnter", @readonly = "readonly", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                           
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.DefDamgStockQty, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.DefDamgStockQty, new { htmlAttributes = new { @class = "form-control BlockEnter", @readonly = "readonly", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control BlockEnter", @readonly = "readonly", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.ReorderQty, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.ReorderQty, new { htmlAttributes = new { @class = "form-control BlockEnter", onkeypress = "return isNumber(event)", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.ReorderQty, "", new { @class = "text-danger" })*@
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.ProductCommission, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.ProductCommission, new { htmlAttributes = new { @class = "form-control BlockEnter", onkeypress = "return isNumber(event)", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.ProductCommission, "", new { @class = "text-danger" })*@
                                </div>
                            </div>

                           
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.SellingRate, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.SellingRate, new { htmlAttributes = new { @class = "form-control BlockEnter", onkeypress = "return isNumber(event)", style = "text-align:right;" } })
                                    @*@Html.ValidationMessageFor(model => model.ReorderQty, "", new { @class = "text-danger" })*@
                                </div>
                            </div>


                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.CgstPercentage, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.CgstPercentage, new { htmlAttributes = new { @class = "form-control BlockEnter", style = "text-align:right;" } })
                                   
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.SgstPercentage, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.SgstPercentage, new { htmlAttributes = new { @class = "form-control BlockEnter", style = "text-align:right;" } })

                                </div>
                            </div>


                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @rows = "3" })
                                    @*@Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "", style = "zoom:1.8" ,@id="IsActive"} })                                   
                                   
                                </div>

                            </div>



                        </div>

                       

                        <div class="col-md-6 mastersep">
                            <div class="col-md-12">
                                <div class="masterinfo">
                                    <br />
                                    <br />

                                    <div class="masterinfoImg">
                                        <img src="~/Content/images/stock.png" />
                                    </div>
                                    <br />
                                    <div class="masterinfoHead">
                                        Product/Spare Item Master
                                    </div>
                                    <br />
                                    <div class="masterinfoDet">
                                        The product/spare item master (often referred to simply as the "item master", comprising all the individual spares, additives and accessories in store) contains descriptions of all items that service center keeps in stock. 
                                        It is the central repository of information on items (such as inventory levels) for the SC. 
                                        The reorder level, base rate and the specific category of spares are defined here. 
                                        Descriptions of the individual items used in SC are stored in item master.

                                    </div>
                                </div>
                            </div>
                       
                           
                        </div>
                        <div class="form-group" hidden="hidden">
                            <div class="col-md-offset-2 col-md-10">

                                <input id="btnInsertUpdateItem" type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-lg-2", id = "ID", @Value = Guid.Empty })
                }
            </div>
            @*<div>
                    @Html.ActionLink("Back to List", "Index")
                </div>*@
        </div>

        <div id="ItemDelete" hidden="hidden">
            @using (Ajax.BeginForm("DeleteItem", "Item", new AjaxOptions { HttpMethod = "POST",  OnSuccess = "DeleteSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", Value = "0", id = "deleteId" })
                    <input id="btnFormDelete" type="submit" value="Delete" class="btn btn-default" />
                </div>
            }
        </div>
        <div class="preloader" id="prelaoder">
            <img src="~/Content/images/loading.gif" class="preloaderImg" />
        </div>
    </div>

        </div>
     
    @section Scripts {
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/datatable")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/jqueryunobtrusiveajaxvalidate")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/bootstrapdatepicker")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/Item")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/editableGrid")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jsZip")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatableButtons")
    }
