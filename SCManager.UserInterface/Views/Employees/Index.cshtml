@model SCManager.UserInterface.Models.EmployeesViewModel
@using SCManager.UserInterface.App_Start
@{
    ViewBag.Title = "Employees";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/DataTables/css/datatable")
    @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/bootstrapdatepicker")
}

<div class="col-md-12">
    <div class="SCHeader col-md-6">
        Employees

    </div>
    <div class="col-md-6">
        <div class="" id="btnPatchEmployeesSettab" style="min-height:25px">

            @{
                var data = new { ActionType = "List" };
                @Html.Action("ChangeButtonStyle", "Employees", data);
            }
        </div>
    </div>
</div>
<div id="exTab3" class="container SCtabContainer">
    <ul class="nav nav-pills">
        <li class="active">
            <a id="EmployeesTab" onclick="List()" href="#EmployeesList" data-toggle="tab"> <span class="fa fa-list">&nbsp;&nbsp;</span>Employees List</a>
        </li>
        <li>
            <a id="AddTab" onclick="Add(1)" href="#EmployeeEntry" data-toggle="tab" style="width:170px"><span class="fa fa-file-o">&nbsp;&nbsp;</span>Employee Entry</a>
        </li>

    </ul>
    <div class="tab-content clearfix">
        <div class="tab-pane fade in active" id="EmployeesList">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                <table id="tblEmployeesList" class="table table-striped table-bordered table-hover" cellspacing="0">
                    <thead>
                        <tr class="text-center">
                            <th style="display:none;">ID</th>
                            <th>Name</th>                        
                            
                            <th>Type</th>
                            <th>MobileNo</th>
                            <th>Address</th>
                            <th>Remarks</th>
                            <th>...</th>

                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="tab-pane fade" id="EmployeeEntry">
            <div class="col-md-12">&nbsp;</div>
             <div class="col-md-12">
            @using (Ajax.BeginForm("InsertUpdateEmployee", "Employee", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "EmployeeSaveSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", id = "formIns_Up" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                  
                 
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="inputForm col-md-12">
                        &nbsp;
                    </div>
                    <div class="col-md-6">

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1 mandatory"></div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-5">
                                @{
                                    List<SelectListItem> listEmployeeType = new List<SelectListItem>();
                                    listEmployeeType.Add(new SelectListItem
                                    { Text = "Technician", Value = "Technician" });
                                    listEmployeeType.Add(new SelectListItem
                                    { Text = "Other Staff", Value = "Other Staff" });                                   
                                }
                                @Html.DropDownListFor(model => model.Type, listEmployeeType, "-- Select Employee Type --",  new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;" } )
                                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1 mandatory"></div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control BlockEnter", onkeypress = "return isNumber(event)" } })
                                @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control BlockEnter", @rows = "3" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control BlockEnter", @rows = "3" } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group" hidden="hidden">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="btnInsertUpdateEmployee" type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                        </div>
                    <div class="col-md-6 mastersep">

                        <div class="col-md-12">
                            <div class="masterinfo">
                                <br />
                                

                                <div class="masterinfoImg">

                                    <img src="~/Content/images/employees.png" />
                                </div>
                                <br />
                                <div class="masterinfoHead">
                                   Employee Master
                                </div>
                                <br />
                                <div class="masterinfoDet">
                                  Employee master is the place where all SC staff details are entered. The main category are technician and other staff.
                                    Basic details of employee are captured here.          Employee General Information & Personal Details includes basic information about an employee such as Name, Employee Id,Address, Contact Information and Employee Dependent Information which is required from the perspective of payroll and reimbursements.
                                </div>
                            </div>
                        </div>

                    </div>
                    </div>
                @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-lg-2", id = "ID", @Value = Guid.Empty })
            }

            <div>
            
            </div>
        </div>
        </div>
        <div id="EmployeeDelete" hidden="hidden">
            @using (Ajax.BeginForm("DeleteEmployee", "Employee", new AjaxOptions { HttpMethod = "POST",  OnSuccess = "DeleteSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", Value = "0", id = "deleteId" })
                    <input id="btnFormDelete" type="submit" value="Delete" class="btn btn-default" />
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/datatable")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jqueryunobtrusiveajaxvalidate")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/bootstrapdatepicker")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/Employees")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/editableGrid")


}