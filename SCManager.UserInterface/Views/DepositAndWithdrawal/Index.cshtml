@model SCManager.UserInterface.Models.DepositAndWithdrawalViewModel

@{
    ViewBag.Title = "Deposit&Withdrawal";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}

@section styles {
    @Styles.Render("~/Content/DataTables/css/datatable")
    @Styles.Render("~/Content/bootstrapdatepicker")
}
<div class="col-md-12">
    <div class="SCHeader col-md-6">
        Deposits And Withdrawals

    </div>
    <div class="col-md-6">
        <div class="" id="btnPatchDepositandwithdrawal" style="min-height:25px">

            @{
                var data = new { ActionType = "Add" };
                @Html.Action("ChangeButtonStyle", "DepositAndWithdrawal", data);
            }
        </div>
    </div>
</div>


<div id="exTab3" class="container SCtabContainer">
    <ul class="nav nav-pills">
        <li class="active">
            <a id="tabDepositwithdrawalList" onclick="List()" href="#DepositwithdrawalList" data-toggle="tab"> <span class="fa fa-list">&nbsp;&nbsp;</span>Deposit/Withdrwal List</a>
        </li>
        <li>
            <a id="tabDepositwithdrawalEntry" onclick="Add(1)" href="#DepositwithdrawalEntry" data-toggle="tab" style="width:235px"><span class="fa fa-file-o">&nbsp;&nbsp;</span>Deposit/Withdrwal Entry</a>
        </li>


    </ul>
    <div class="tab-content clearfix">
        <div class="tab-pane fade in active" id="DepositwithdrawalList">
            <div class="col-md-12">&nbsp;</div>

            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
               
                <div class="col-md-4 form-horizontal">
                    <div class="form-group">
                        <div class="col-sm-offset-2 col-sm-10">
                            <div class="checkbox">
                                <label>
                                    <input id="chkShowAll" type="checkbox" onclick="ShowAll(this)"> Show All
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 form-horizontal" style="margin-left: -272px;">
                    <div class="form-group">
                        <!----------------6-------------------->
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.RefDate, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            @*@Html.EditorFor(model => model.RefDate, new { htmlAttributes = new { @class = "form-control HeaderBox", @id = "fromDate" } })*@
                            <input type="date" class="form-control" id="txtReferenceDateFrom" onChange="ReferenceDateOnChange(this)">
                        </div>

                    </div>
                </div>
                <div class="col-md-4 form-horizontal" style="margin-left: -61px;">

                    <div class="form-group">
                        <!----------------6-------------------->

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.RefDate, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-6">
                            <input type="date" class="form-control" id="txtReferenceDateTo" onChange="ReferenceDateOnChange(this)">
                            @*@Html.EditorFor(model => model.RefDate, new { htmlAttributes = new { @class = "form-control HeaderBox", @id = "toDate" } })*@
                      
                        </div>

                    </div>
                </div>

                <div class="col-md-12">&nbsp;</div>
                <div class="col-md-12">
                    <table id="tblDepositwithdrawalList" class="table table-striped table-bordered table-hover" cellspacing="0" width="100%">
                        <thead>
                            <tr class="text-center">
                                <th style="display:none;">ID</th>
                                <th>Transaction Type</th>
                                <th>Date</th>
                                <th>Reference No.</th>
                                <th>Amount (₹)</th>
                                <th>Description</th>
                                <th>...</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
        <div class="tab-pane fade " id="DepositwithdrawalEntry">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                @using (Ajax.BeginForm("InsertUpdateDepositAndWithdrawal", "DepositAndWithdrawal", new AjaxOptions { HttpMethod = "POST", OnSuccess = "DepositAndWithdrawalSaveSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", id = "formdepositwithdrwal" }))
                 {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="inputForm col-md-12">
                            &nbsp;
                        </div>
                        <div class="col-md-6">

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.TransactionType, htmlAttributes: new { @class = "control-label" })
                                 </div>
                                    <div class="col-md-5">
                                        @Html.DropDownListFor(model => model.TransactionType, Model.TransactionTypeList, "-- Select Transaction Type --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;" })
                                        @Html.HiddenFor(model => model.ID, htmlAttributes: new { Value = "", @id = "DepwithID" })
                                        @Html.ValidationMessageFor(model => model.TransactionType, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.RefNo, htmlAttributes: new { @class = "control-label" })
                                 </div>
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.RefNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RefNo, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.RefDate, htmlAttributes: new { @class = "control-label" })
                                 </div>
                                <div class="col-md-5">
                                        @Html.EditorFor(model => model.RefDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.RefDate, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label" })
                                </div>
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-5">

                                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = 3})
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                        </div>
                        <div class="col-md-6 mastersep">
                            <div class="col-md-12">
                                <div class="masterinfo">
                                    <br />
                                    <br />

                                    <div class="masterinfoImg">
                                        <img src="~/Content/images/indian-rupee.png" />

                                    </div>
                                    <br />
                                    <div class="masterinfoHead">
                                        Other Income
                                    </div>
                                    <br />
                                    <div class="masterinfoDet">
                                        Other Income for SC comes mainly in two ways. One is as ICR payments from IFB. That is IFB pays SC based on the ICR Bills they collected and the
                                        no of call SC attended etc. Another income source will be from other Service Centers . That is by transfering Items on request basis to other SCs.


                                    </div>
                                </div>
                            </div>


                        </div>

                        <div class="form-group" hidden="hidden">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="btnInsertUpdateDepositandwithdrawal" type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                       
                                        @Html.HiddenFor(model => model.RefNo, htmlAttributes: new { @class = "control-label col-lg-2", id = "HiddenRefNo", @Value = string.Empty })
            }
            </div>
        </div>
     
        <div id="OtherIncomeDelete" hidden="hidden">
            @using (Ajax.BeginForm("DeleteDepositAndWithdrawal", "DepositAndWithdrawal", new AjaxOptions { HttpMethod = "POST", OnSuccess = "DeleteSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", id = "deleteId" })
                    <input id="btnFormDelete" type="submit" value="Delete" class="btn btn-default" />
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/datatable")
    @Scripts.Render("~/bundles/jqueryunobtrusiveajaxvalidate")
    @Scripts.Render("~/bundles/bootstrapdatepicker")
    @Scripts.Render("~/bundles/Depositwithdrawal")
}




