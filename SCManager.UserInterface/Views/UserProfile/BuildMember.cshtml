@model SCManager.UserInterface.Models.UserViewModel
@using SCManager.UserInterface.App_Start
@{
    ViewBag.Title = "Build Member";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion, "~/Content/DataTables/css/datatable")
  
}

<div class="col-md-12">
    <div class="SCHeader col-md-6">
        Build Member

    </div>
    <div class="col-md-6">
        <div class="" id="btnPatchBuildMember" style="min-height:25px">

            @{
                var data = new { ActionType = "Add" };
                @Html.Action("ChangeButtonStyle", "UserProfile", data);
            }
        </div>
    </div>
</div>
<div id="exTab3" class="container SCtabContainer">
    <ul class="nav nav-pills">
        <li class="active">
            <a id="UsersTab" onclick="List()" href="#UsersList" data-toggle="tab"> <span class="fa fa-list">&nbsp;&nbsp;</span>Users List</a>
        </li>
        <li>
            <a id="AddTab" onclick="Add(1)" href="#UserEntry" data-toggle="tab" style="width:170px"><span class="fa fa-file-o">&nbsp;&nbsp;</span>Users Entry</a>
        </li>

    </ul>
    <div class="tab-content clearfix">
        <div class="tab-pane fade in active" id="UsersList">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                <table id="tblUsersList" class="table table-striped table-bordered table-hover" cellspacing="0">
                    <thead>
                        <tr class="text-center">
                            <th>ID</th>
                            <th>SCCode</th>
                            <th>SC Name</th>
                            <th>User Name</th>
                            <th>Email</th>
                            <th>Login</th>
                            <th>Roles</th>
                            <th>Active</th>
                            <th>...</th>

                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="tab-pane fade" id="UserEntry">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
                @using (Ajax.BeginForm("InsertUpdateUser", "UserProfile", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "UserSaveSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "BeforePost", OnComplete = "" }, new { @class = "form-horizontal", role = "form", id = "userform" }))
                 {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">


                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="inputForm col-md-12">
                            &nbsp;
                        </div>
                        <div class="col-md-6">

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.SCCode, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.DropDownListFor(model => model.SCCode, Model.SCList, "-- Select Service center --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;" })
                                    @Html.ValidationMessageFor(model => model.SCCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                           

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-lg-2", id = "ID" })
                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.RoleList, htmlAttributes: new { @class = "control-label" })
                                    @Html.HiddenFor(model => model.RoleList, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5" id="divroles">
                                    @{
                                        if (Model.RoleVMList != null)
                                        {
                                            foreach (SCManager.UserInterface.Models.RoleViewModel r in Model.RoleVMList)
                                            {
                                                if (@r.RoleName != "SAdmin")
                                                {
                                                    <label class="checkbox-inline">
                                                        <input type="checkbox" id=@r.RoleName name="Roles" value=@r.ID> @r.RoleName
                                                    </label>
                                                }

                                            }
                                        }
                                    }
                                   
                                    @Html.ValidationMessageFor(model => model.RoleList, "", new { @class = "text-danger" })
                                   
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.LoginName, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.LoginName, new { htmlAttributes = new { @class = "form-control BlockEnter" } })
                                    @Html.ValidationMessageFor(model => model.LoginName, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    <label class="checkbox-inline">
                                        @Html.CheckBoxFor(model => model.Active)
                                       
                                    </label>
                                </div>
                            </div>

                            <div class="form-group" hidden="hidden">
                                <div class="col-md-offset-2 col-md-10">
                                    <input id="btnInsertUpdateUser" type="submit" value="Create" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                        
                    </div>
                   
                                        }

                <div>

                </div>
            </div>
        </div>
        <div id="UserDelete" hidden="hidden">
            @using (Ajax.BeginForm("DeleteUser", "UserProfile", new AjaxOptions { HttpMethod = "POST", OnSuccess = "DeleteSuccess", Confirm = "Are you sure?", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", id = "deleteId" })
                    @Html.HiddenFor(model => model.SCCode, htmlAttributes: new { @class = "control-label col-md-4",  id = "DeleteSCCode" })
                    <input id="btnuserFormDelete" type="submit" value="Delete" class="btn btn-default" />
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/datatable")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/jqueryunobtrusiveajaxvalidate")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/bundles/BuildMember")
}

