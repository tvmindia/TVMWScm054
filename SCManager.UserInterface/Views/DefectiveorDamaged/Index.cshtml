@model SCManager.UserInterface.Models.DefectiveorDamagedViewModel
@using SCManager.UserInterface.App_Start

@{
    ViewBag.Title = "Defective/Damaged";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
@section styles {
    @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/DataTables/css/datatable")
    @Styles.RenderFormat(SiteKeys.StyleVersion,"~/Content/bootstrapdatepicker")
}
<div class="col-md-12">
    <div class="SCHeader col-md-6">
        Defective/Damaged

    </div>
    <div class="col-md-6">
        <div class="" id="btnPatchDefectiveorDamagedSettab" style="min-height:25px">

            @{
                var data = new { ActionType = "List" };
                @Html.Action("ChangeButtonStyle", "DefectiveorDamaged", data);
            }
        </div>
        
    </div>
  
</div>
<div id="exTab3" class="container SCtabContainer">
    <ul class="nav nav-pills">
        <li class="active">
            <a id="DefectiveorDamagedTab" onclick="List()" href="#DefectiveorDamagedList" data-toggle="tab"> <span class="fa fa-list">&nbsp;&nbsp;</span>Defective/Damaged List</a>
        </li>
        <li>
            <a id="AddTab" onclick="Add(1)" href="#DefectiveorDamagedEntry" data-toggle="tab" style="width:235px"><span class="fa fa-file-o">&nbsp;&nbsp;</span>Defective/Damaged Entry</a>
        </li>

    </ul>
    <div class="tab-content clearfix">
        <div class="tab-pane fade in active" id="DefectiveorDamagedList">
            <div class="col-md-12">&nbsp;</div>
            <div class="col-md-12">
               
                <table id="tblDefectiveorDamagedList" class="table table-striped table-bordered table-hover" cellspacing="0">
                    <thead>
                        <tr class="text-center">
                            <th style="display:none;">ID</th>
                            <th>Type</th>
                            <th style="width:85px !important;">Date</th>
                            <th style="width:120px !important;">Ref / SPU No.</th>
                            <th>Code</th>
                            <th style="width:300px !important;">Description</th>
                            <th style="width:20px !important;">Quantity </th>
                            <th style="width:20px !important;">Customer </th>
                            <th style="width:100px !important;">Returned To Company</th>
                            <th style="width:85px !important;">Receive Status</th>
                            <th >Remark</th>
                            <th>...</th>

                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="tab-pane fade" id="DefectiveorDamagedEntry">
            
            <div class="col-md-12">&nbsp;</div>
            
            <div class="col-md-12">
                <span id="MsgReturn" style="position: absolute;right: 0px;top:-15px;font-size: 12px;color: #b50808;display:none;">Item Not Returned! Use 'Return' option to physically return the item</span>
                @using (Ajax.BeginForm("InsertUpdateDefectDamaged", "DefectiveorDamaged", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "DefectiveDamagedSaveSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form", id = "formIns_Up" }))
            {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="inputForm col-md-12">
                            &nbsp;
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    @{
                                        List<SelectListItem> listDefectiveDamagedType = new List<SelectListItem>();
                                        listDefectiveDamagedType.Add(new SelectListItem
                                        { Text = "Defective", Value = "Defective" });
                                        listDefectiveDamagedType.Add(new SelectListItem
                                        { Text = "Damaged", Value = "Damaged" });
                                    }
                                    @Html.DropDownListFor(model => model.Type, listDefectiveDamagedType, "-- Select Type --", new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;", @onchange = "TypeOnChange(this)" })
                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Technician, htmlAttributes: new { @class = "control-label " })
                                   </div>
                                     <div class="col-md-5">
                                        @Html.DropDownListFor(model => model.EmpID, Model.TechniciansList, "-- Select Technician --" , new { @class = "form-control BlockEnter", value = -1, style = "padding:4px 12px;" })
                                        @Html.ValidationMessageFor(model => model.EmpID, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.OpenDate, htmlAttributes: new { @class = "control-label " })
                                   </div>
                                     <div class="col-md-5">
                                        @Html.EditorFor(model => model.OpenDate, new { htmlAttributes = new { @class = "form-control HeaderBox BlockEnter datepicker", @id = "OpenDate" } })
                                        @Html.ValidationMessageFor(model => model.OpenDate, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>

                           

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.ItemCode, htmlAttributes: new { @class = "control-label " })
                                   </div>
                                     <div class="col-md-5">
                                         @Html.EditorFor(model => model.ItemCode, new { htmlAttributes = new { @class = "form-control BlockEnter", list= "Materials", @onchange = "ItemCodeOnChange(this)" } })
                                         <datalist id="Materials" onfocus='this.size=10;' onblur='this.size=1;'
                                                   onchange='this.size=1; this.blur();'></datalist>
                                        @Html.ValidationMessageFor(model => model.ItemCode, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-md-1 mandatory"></div>
                                </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control BlockEnter", onkeypress = "return isNumber(event)", style = "text-align:right" } })
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 mandatory"></div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.RefNo, htmlAttributes: new { @class = "control-label " ,@id="lblRefNo" })
                                    @Html.LabelFor(model => model.SPUNo, htmlAttributes: new { @class = "control-label ",@id="lblSPUNo" ,style="display:none;"})
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.RefNo, new { htmlAttributes = new { @class = "form-control BlockEnter", @onclick = "RemoveRefCSS();" } })
                                    @Html.ValidationMessageFor(model => model.RefNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.TicketNo, htmlAttributes: new { @class = "control-label " })                                 
                                </div>
                                <div class="col-md-5" id="TicketNoDiv">
                                    @Html.EditorFor(model => model.TicketNo, new { htmlAttributes = new { @class = "form-control BlockEnter",@onclick="RemoveCss();" } })
                                    @Html.ValidationMessageFor(model => model.TicketNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-5">
                                    @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control BlockEnter", @onclick = "RemoveCss();" } })
                                    @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control HeaderBox BlockEnter", rows = 3, @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label " })
                                   </div>

                                     <div class="col-md-5">
                                        @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control HeaderBox BlockEnter", rows = 4, @id = "Remarks" } })
                                        @*@Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })*@
                                    </div>
                                </div>
                        </div>
                        <div class="form-group" hidden="hidden">
                            <div class="col-md-offset-2 col-md-10">
                                <input id="btnInsertUpdateDefectiveDamaged" type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-lg-2", id = "ID", @Value = Guid.Empty })
                    @Html.HiddenFor(model => model.HiddenEmpID, htmlAttributes: new { @class = "control-label col-lg-2", id = "HiddenEmpID", @Value = Guid.Empty })
                    @Html.HiddenFor(model => model.ItemID, htmlAttributes: new { @class = "control-label col-lg-2", id = "ItemID", @Value = Guid.Empty })
                    @Html.HiddenFor(model => model.HiddenType, htmlAttributes: new { @class = "control-label col-lg-2", id = "HiddenType", @Value = string.Empty })
                    @Html.HiddenFor(model => model.HiddenQty, htmlAttributes: new { @class = "control-label col-lg-2", id = "HiddenQty", @Value = string.Empty })
                                        }
                </div>
            </div>
        <div id="DefectiveDamagedDelete" hidden="hidden">
            @using (Ajax.BeginForm("DeleteDefectiveDamaged", "DefectiveorDamaged", new AjaxOptions { HttpMethod = "POST", OnSuccess = "DeleteSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", Value = "0", id = "deleteId" })
                    <input id="btnFormDelete" type="submit" value="Delete" class="btn btn-default" />
                </div>
            }
        </div>
        <div id="DefectiveDamagedReturn" hidden="hidden">
            @using (Ajax.BeginForm("ReturnDefectiveDamaged", "DefectiveorDamaged", new AjaxOptions { HttpMethod = "POST", OnSuccess = "ReturnSuccess", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "", OnComplete = "" }, new { @class = "form-horizontal" ,role = "form" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-actions no-color">
                    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-4", Value = "0", id = "returnId" })
                    <input id="btnFormReturn" type="submit" value="Return" class="btn btn-default" />
                </div>
            }
        </div>
        </div>
  
    </div>
<div class="preloader" id="prelaoder">
    <img src="~/Content/images/loading.gif" class="preloaderImg" />
</div>
    @section Scripts {
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/datatable")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/jqueryunobtrusiveajaxvalidate")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/bootstrapdatepicker")
        @Scripts.RenderFormat(SiteKeys.ScriptVersion,"~/bundles/DefectDamage")
    }
